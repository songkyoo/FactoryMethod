using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace Macaron.FactoryMethod.Tests
{
    [TestFixture]
    public class FactoryMethodGeneratorTest
    {
        private static void RunGenerator(string sourceCode, string expected)
        {
            var references = AppDomain.CurrentDomain.GetAssemblies()
                .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
                .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
                .Cast<MetadataReference>();

            var syntaxTree = CSharpSyntaxTree.ParseText(SourceText.From(sourceCode, Encoding.UTF8));
            var compilation = CSharpCompilation.Create(
                assemblyName: "Tests",
                syntaxTrees: [syntaxTree],
                references: references,
                options: new CSharpCompilationOptions(
                    OutputKind.DynamicallyLinkedLibrary,
                    nullableContextOptions: NullableContextOptions.Enable
                )
            );

            var generator = new FactoryMethodGenerator();
            var driver = CSharpGeneratorDriver
                .Create(generator)
                .RunGenerators(compilation);

            var result = driver.GetRunResult().Results.Single();
            var generatedSources = result.GeneratedSources;

            // 0, 1번은 GeneratorFactoryMethodAttribute, IgnoreFactoryMethodAttribute
            var actual = generatedSources.Length > 2 ? generatedSources[2].SyntaxTree.ToString() : "";

            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        public void GeneratesFactoryMethod_ForPublicConstructor()
        {
            RunGenerator(
                sourceCode:
                """
                namespace Macaron.FactoryMethod.Tests;

                [GenerateFactoryMethod]
                public partial class Foo
                {
                    private readonly int _bar;

                    public Foo(int bar)
                    {
                        _bar = bar;
                    }
                }
                """,
                expected:
                """
                // <auto-generated />
                #nullable enable

                namespace Macaron.FactoryMethod.Tests
                {
                    partial class Foo
                    {
                        public static Foo Of(int bar) => new(bar);
                    }
                }

                """
            );
        }

        [Test]
        public void GeneratesFactoryMethod_ForInternalConstructor()
        {
            RunGenerator(
                sourceCode:
                """
                namespace Macaron.FactoryMethod.Tests;

                [GenerateFactoryMethod]
                public partial class Foo
                {
                    internal Foo(int bar) { }
                }
                """,
                expected:
                """
                // <auto-generated />
                #nullable enable

                namespace Macaron.FactoryMethod.Tests
                {
                    partial class Foo
                    {
                        internal static Foo Of(int bar) => new(bar);
                    }
                }

                """
            );
        }

        [Test]
        public void GenerateFactoryMethod_SkipDefaultConstructor()
        {
            RunGenerator(
                sourceCode:
                """
                namespace Macaron.FactoryMethod.Tests;

                [GenerateFactoryMethod]
                public partial class Foo
                {
                    public Foo() { }
                }
                """,
                expected:
                ""
            );
        }

        [Test]
        public void GenerateFactoryMethod_WithMultipleConstructors()
        {
            RunGenerator(
                sourceCode:
                """
                namespace Macaron.FactoryMethod.Tests;

                [GenerateFactoryMethod]
                public partial class Foo
                {
                    public Foo(int bar) { }

                    public Foo(int bar, string baz) { }
                }
                """,
                expected:
                """
                // <auto-generated />
                #nullable enable

                namespace Macaron.FactoryMethod.Tests
                {
                    partial class Foo
                    {
                        public static Foo Of(int bar) => new(bar);

                        public static Foo Of(int bar, string baz) => new(bar, baz);
                    }
                }

                """
            );
        }

        [Test]
        public void GenerateFactoryMethod_UseFullyQualifiedTypeNameInParameter()
        {
            RunGenerator(
                sourceCode:
                """
                namespace Macaron.FactoryMethod.Tests;

                public class Bar { }

                [GenerateFactoryMethod]
                public partial class Foo
                {
                    public Foo(Bar bar) { }
                }
                """,
                expected:
                """
                // <auto-generated />
                #nullable enable

                namespace Macaron.FactoryMethod.Tests
                {
                    partial class Foo
                    {
                        public static Foo Of(global::Macaron.FactoryMethod.Tests.Bar bar) => new(bar);
                    }
                }

                """
            );
        }

        [Test]
        public void GenerateFactoryMethod_PreservesModifiersAndNullability()
        {
            RunGenerator(
                sourceCode:
                """
                namespace Macaron.FactoryMethod.Tests;

                public partial class Foo
                {
                    [GenerateFactoryMethod]
                    public Modifiers(ref int x, in string? y, params object[] values) { }
                }
                """,
                expected:
                """
                // <auto-generated />
                #nullable enable

                namespace Macaron.FactoryMethod.Tests
                {
                    partial class Foo
                    {
                        public static Foo Of(ref int x, in string? y, params object[] values) => new(ref x, in y, values);
                    }
                }

                """
            );
        }

        [Test]
        public void IgnoresFactoryMethod_NotGenerateFactoryMethod()
        {
            RunGenerator(
                sourceCode:
                """
                namespace Macaron.FactoryMethod.Tests;

                [GenerateFactoryMethod]
                public partial class Foo
                {
                    private readonly int _bar;
                    private readonly string _baz;

                    [IgnoreFactoryMethod]
                    public Foo(int bar)
                    {
                        _bar = bar;
                    }

                    public Foo(int bar, string baz)
                    {
                        _bar = bar;
                        _baz = baz;
                    }
                }
                """,
                expected:
                """
                // <auto-generated />
                #nullable enable

                namespace Macaron.FactoryMethod.Tests
                {
                    partial class Foo
                    {
                        public static Foo Of(int bar, string baz) => new(bar, baz);
                    }
                }

                """
            );
        }

        [Test]
        public void IgnoreFactoryMethod_OverridesGenerateFactoryMethod()
        {
            RunGenerator(
                sourceCode:
                """
                namespace Macaron.FactoryMethod.Tests;

                public partial class Foo
                {
                    [GenerateFactoryMethod("Create")]
                    [IgnoreFactoryMethod]
                    public Foo(int bar) { }
                }
                """,
                expected:
                ""
            );
        }
    }
}

