using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace Macaron.FactoryMethod.Tests;

[TestFixture]
public class FactoryMethodGeneratorTests
{
    private static void Assert(string sourceCode, string expected)
    {
        var dataAnnotationsAssembly = typeof(System.ComponentModel.DataAnnotations.RequiredAttribute).Assembly;

        var references = AppDomain.CurrentDomain.GetAssemblies()
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Append(dataAnnotationsAssembly)
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>();

        var syntaxTree = CSharpSyntaxTree.ParseText(SourceText.From(sourceCode, Encoding.UTF8));
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.FactoryMethod.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        var generator = new FactoryMethodGenerator();
        var driver = CSharpGeneratorDriver
            .Create(generator)
            .RunGenerators(compilation);

        var result = driver.GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;

        // 0, 1번은 GeneratorFactoryMethodAttribute, IgnoreFactoryMethodAttribute
        var actual = generatedSources.Length > 2 ? generatedSources[2].SyntaxTree.ToString() : "";

        NUnit.Framework.Assert.That(actual, Is.EqualTo(expected));
    }

    [Test]
    public void When_ClassHasPublicConstructor_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                private readonly int _bar;

                public Foo(int bar)
                {
                    _bar = bar;
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(int bar) => new(bar);
                }
            }

            """
        );
    }

    [Test]
    public void When_ClassHasInternalConstructor_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                internal Foo(int bar) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    internal static Foo Of(int bar) => new(bar);
                }
            }

            """
        );
    }

    [Test]
    public void When_ClassHasDefaultConstructor_Then_DoesNotGenerateFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                public Foo() { }
            }
            """,
            expected:
            ""
        );
    }

    [Test]
    public void When_ClassHasMultipleConstructors_Then_GeneratesFactoryMethodForEach()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                public Foo(int bar) { }

                public Foo(int bar, string baz) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(int bar) => new(bar);

                    public static Foo Of(int bar, string baz) => new(bar, baz);
                }
            }

            """
        );
    }

    [Test]
    public void When_ParameterTypesAreInSameNamespace_Then_UsesFullyQualifiedTypeNames()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            public class Bar { }

            [GenerateFactoryMethod]
            public partial class Foo
            {
                public Foo(Bar bar) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(global::Macaron.FactoryMethod.Tests.Bar bar) => new(bar);
                }
            }

            """
        );
    }

    [Test]
    public void When_GeneratingFactoryMethod_Then_PreservesParameterModifiersAndNullability()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            public partial class Foo
            {
                [GenerateFactoryMethod]
                public Modifiers(ref int x, in string? y, params object[] values) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(ref int x, in string? y, params object[] values) => new(ref x, in y, values);
                }
            }

            """
        );
    }

    [Test]
    public void When_TypeIsNestedClass_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            public partial class OuterClass
            {
                [GenerateFactoryMethod]
                public partial class NestedClass
                {
                    public NestedClass(int value) { }
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class OuterClass
                {
                    partial class NestedClass
                    {
                        public static NestedClass Of(int value) => new(value);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_TypeIsStruct_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial struct Point
            {
                public int X { get; }
                public int Y { get; }

                public Point(int x, int y)
                {
                    X = x;
                    Y = y;
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial struct Point
                {
                    public static Point Of(int x, int y) => new(x, y);
                }
            }

            """
        );
    }

    [Test]
    public void When_TypeIsRecord_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial record Person(string FirstName, string LastName)
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial record Person
                {
                    public static Person Of(string firstName, string lastName) => new(firstName, lastName);
                }
            }

            """
        );
    }

    [Test]
    public void When_TypeIsRecordStruct_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial record struct Person(string FirstName, string LastName)
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial record struct Person
                {
                    public static Person Of(string firstName, string lastName) => new(firstName, lastName);
                }
            }

            """
        );
    }

    [Test]
    public void When_TypeIsGeneric_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Container<T>
            {
                public T Value { get; }

                public Container(T value)
                {
                    Value = value;
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Container<T>
                {
                    public static Container Of(T value) => new(value);
                }
            }

            """
        );
    }

    [Test]
    public void When_TypeIsDeepNested_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            public partial class Level1
            {
                public partial class Level2
                {
                    [GenerateFactoryMethod]
                    public partial class Level3
                    {
                        public Level3(string value) { }
                    }
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Level1
                {
                    partial class Level2
                    {
                        partial class Level3
                        {
                            public static Level3 Of(string value) => new(value);
                        }
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_SpecifiedInTypeAttribute_Then_UsesCustomMethodName()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod("Create")]
            public partial class Foo
            {
                public Foo(int bar) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Create(int bar) => new(bar);
                }
            }

            """
        );
    }

    [Test]
    public void When_SpecifiedInConstructorAttribute_Then_UsesCustomMethodName()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            public partial class Foo
            {
                [GenerateFactoryMethod("FromInt")]
                public Foo(int bar) { }

                [GenerateFactoryMethod("FromString")]
                public Foo(string baz) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo FromInt(int bar) => new(bar);

                    public static Foo FromString(string baz) => new(baz);
                }
            }

            """
        );
    }

    [Test]
    public void When_BothTypeAndConstructorAttributesArePresent_Then_PrioritizesConstructorAttribute()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod("Create")]
            public partial class Foo
            {
                public Foo(int bar) { }

                [GenerateFactoryMethod("FromString")]
                public Foo(string baz) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Create(int bar) => new(bar);

                    public static Foo FromString(string baz) => new(baz);
                }
            }

            """
        );
    }

    [Test]
    public void When_PrivateConstructorHasAttribute_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                [GenerateFactoryMethod]
                private Foo(int bar) { }

                public Foo(string baz) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(int bar) => new(bar);

                    public static Foo Of(string baz) => new(baz);
                }
            }

            """
        );
    }

    [Test]
    public void When_TypeHasNoNamespace_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            using Macaron.FactoryMethod;

            [GenerateFactoryMethod]
            public partial class GlobalFoo
            {
                public GlobalFoo(int bar) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            partial class GlobalFoo
            {
                public static GlobalFoo Of(int bar) => new(bar);
            }

            """
        );
    }

    [Test]
    public void When_ConstructorHasTupleParameters_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                public Foo((int x, int y) point) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of((int x, int y) point) => new(point);
                }
            }

            """
        );
    }

    [Test]
    public void When_ConstructorHasGenericParameters_Then_GeneratesFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            using System.Collections.Generic;

            namespace Macaron.FactoryMethod.Tests;

            public class Bar { }

            [GenerateFactoryMethod]
            public partial class Foo
            {
                public Foo(List<int> numbers, Dictionary<string, Bar> items) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(global::System.Collections.Generic.List<int> numbers, global::System.Collections.Generic.Dictionary<string, global::Macaron.FactoryMethod.Tests.Bar> items) => new(numbers, items);
                }
            }

            """
        );
    }

    [Test]
    public void When_GeneratingFactoryMethod_Then_PreservesParameterAttributes()
    {
        Assert(
            sourceCode:
            """
            using System.ComponentModel.DataAnnotations;

            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                public Foo([Required] string name, [Range(1, 100)] int age) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of([global::System.ComponentModel.DataAnnotations.RequiredAttribute] string name, [global::System.ComponentModel.DataAnnotations.RangeAttribute(1, 100)] int age) => new(name, age);
                }
            }

            """
        );
    }

    [Test]
    public void When_GeneratingFactoryMethodForRecord_Then_PreservesParameterAttributes()
    {
        Assert(
            sourceCode:
            """
            using System.ComponentModel.DataAnnotations;

            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial record Foo([Required] string Name, [Range(1, 100)] int Age)
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial record Foo
                {
                    public static Foo Of([global::System.ComponentModel.DataAnnotations.RequiredAttribute] string name, [global::System.ComponentModel.DataAnnotations.RangeAttribute(1, 100)] int age) => new(name, age);
                }
            }

            """
        );
    }

    [Test]
    public void When_ConstructorHasDefaultParameters_Then_PreservesDefaultValues()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                public Foo(int bar = 42, string baz = "default") { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(int bar = 42, string baz = "default") => new(bar, baz);
                }
            }

            """
        );
    }

    [Test]
    public void When_GeneratingFactoryMethod_Then_HandlesComplexAttributesAndDefaults()
    {
        Assert(
            sourceCode:
            """
            using System.ComponentModel.DataAnnotations;

            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class ComplexExample
            {
                public ComplexExample(
                    [Required(ErrorMessage = "Name is required")] string name = "Anonymous",
                    [Range(1, 150, ErrorMessage = "Age must be between 1 and 150")] int age = 18,
                    [EmailAddress] string? email = null
                ) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class ComplexExample
                {
                    public static ComplexExample Of([global::System.ComponentModel.DataAnnotations.RequiredAttribute(ErrorMessage = "Name is required")] string name = "Anonymous", [global::System.ComponentModel.DataAnnotations.RangeAttribute(1, 150, ErrorMessage = "Age must be between 1 and 150")] int age = 18, [global::System.ComponentModel.DataAnnotations.EmailAddressAttribute] string? email = null) => new(name, age, email);
                }
            }

            """
        );
    }

    [Test]
    public void When_GeneratingFactoryMethod_Then_PreservesEnumDefaultValues()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            public enum UserRole
            {
                Guest,
                User,
                Admin
            }

            [GenerateFactoryMethod]
            public partial class User
            {
                public User(string name, UserRole role = UserRole.Guest, UserRole? otherRole = null) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class User
                {
                    public static User Of(string name, global::Macaron.FactoryMethod.Tests.UserRole role = global::Macaron.FactoryMethod.Tests.UserRole.Guest, global::Macaron.FactoryMethod.Tests.UserRole? otherRole = null) => new(name, role, otherRole);
                }
            }

            """
        );
    }

    [Test]
    public void When_GeneratingFactoryMethod_Then_PreservesBooleanDefaultValues()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Configuration
            {
                public Configuration(string name, bool isEnabled = true, bool isVisible = false) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Configuration
                {
                    public static Configuration Of(string name, bool isEnabled = true, bool isVisible = false) => new(name, isEnabled, isVisible);
                }
            }

            """
        );
    }

    [Test]
    public void When_GeneratingFactoryMethod_Then_PreservesNullDefaultValue()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class NullableExample
            {
                public NullableExample(int id, string? description = null) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class NullableExample
                {
                    public static NullableExample Of(int id, string? description = null) => new(id, description);
                }
            }

            """
        );
    }

    [Test]
    public void When_SpecifiedMethodNameIsEmpty_Then_UsesDefaultOfName()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod("")]
            public partial class Foo
            {
                public Foo(int bar) { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(int bar) => new(bar);
                }
            }

            """
        );
    }

    [Test]
    public void When_ConstructorHasIgnoreAttribute_Then_DoesNotGenerateFactoryMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            [GenerateFactoryMethod]
            public partial class Foo
            {
                private readonly int _bar;
                private readonly string _baz;

                [IgnoreFactoryMethod]
                public Foo(int bar)
                {
                    _bar = bar;
                }

                public Foo(int bar, string baz)
                {
                    _bar = bar;
                    _baz = baz;
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.FactoryMethod.Tests
            {
                partial class Foo
                {
                    public static Foo Of(int bar, string baz) => new(bar, baz);
                }
            }

            """
        );
    }

    [Test]
    public void When_ConstructorHasBothAttributes_Then_PrioritizesIgnoreAttribute()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.FactoryMethod.Tests;

            public partial class Foo
            {
                [GenerateFactoryMethod("Create")]
                [IgnoreFactoryMethod]
                public Foo(int bar) { }
            }
            """,
            expected:
            ""
        );
    }
}
